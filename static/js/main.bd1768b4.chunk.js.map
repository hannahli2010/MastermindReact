{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSecret","secret","x","Math","floor","random","console","log","enterGuess","enter","guess","charAt","output","numString","toString","temp","y","state","enteredGuesses","push","react_default","a","createElement","setState","list","text","length","check","handleOnChange","event","target","value","errorMsg","disableB","handleClick","button","disableT","stlye","padding","flexDirection","style","justifyContent","alignItems","index_es","onChange","disabled","width","margin","variant","color","onClick","map","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd1768b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, TextField } from '@material-ui/core';\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      errorMsg: '',\n      disableT: true,\n      disableB: false,\n      secret: [\n        1,\n        2,\n        3,\n        4,\n        5\n      ],\n      guess: [\n        1,\n        2,\n        3,\n        4,\n        5\n      ],\n      enteredGuesses: [<p>Guesses: </p>],\n      button: 'Start'\n\n    }\n  }\n\n  getSecret = (secret) => {\n    for (let x = 0; x < 5; x++) {\n      secret[x] = '' + Math.floor(Math.random() * 9 + 1)\n    }\n    console.log('Secret: ' + secret)\n  }\n\n  enterGuess = (enter, guess) => {\n    for (let x = 0; x < 5; x++) {\n      guess[x] = enter.charAt(x);\n    }\n  }\n\n  output = (guess, secret) => {\n    let numString = this.toString(guess) + '   ';\n    \n    let temp = [\n      1,\n      2,\n      3,\n      4,\n      5\n    ]\n    \n    for (let x = 0; x < 5; x++) {\n      temp[x] = guess[x];\n    }\n\n    for (let x = 0; x < 5; x++) {\n      if (temp[x] === secret[x]) {\n        temp[x] = '*';\n      }\n    }\n\n    for (let x = 0; x < 5; x++) {\n      for (let y = 0; y < 5; y++) {\n        if (temp[x] === secret[y] && x !== y) {\n          temp[x] = '+';\n        }\n      }\n    }\n\n    for (let x = 0; x < 5; x++) {\n      if (temp[x] !== '*' && temp[x] !== '+') {\n        temp[x] = '-';\n      }\n    }\n\n    numString += this.toString(temp);\n    console.log(this.state.guess);\n\n    this.state.enteredGuesses.push(<p>{numString}</p>);\n\n    this.setState({\n      enteredGuesses: this.state.enteredGuesses\n    })\n  }\n\n  toString = (list) => {\n    let text = ''\n    for (let x = 0; x < list.length; x++) {\n      text += list[x]\n    }\n    return text\n  }\n\n  check = (guess) => {\n    for (let x = 0; x < 5; x++) {\n      if (guess[x] !== '*') {\n        return false\n      }\n    }\n    return true\n  }\n\n  handleOnChange = (event) => {\n    if (event.target.value.length !== 5) {\n      this.setState({\n        errorMsg: 'Invalid number',\n        disableB: true\n      })\n    } else {\n      this.enterGuess(event.target.value, this.state.guess)\n      this.setState({\n        errorMsg: '',\n        disableB: false,\n        guess: this.state.guess\n      })\n    }\n  }\n\n  handleClick = () => {\n    if (this.state.button === 'Start') {\n      this.getSecret(this.state.secret)\n      this.setState({\n        button: 'Enter',\n        disableT: false,\n        secret: this.state.secret,\n        enteredGuesses: [<p>Guesses: </p>]\n      })\n    } else {\n      this.output(this.state.guess, this.state.secret)\n      if (this.check(this.state.guess)) {\n        this.setState({\n          button: 'Start',\n          disableT: true\n        })\n      }\n    }\n  }\n\n  render () {\n    const textFieldStyle = {\n      width: '250px',\n      margin: '10px 10px'\n    }\n\n    /* title='Enter 5 numbers from 1 to 9 to guess the hidden 5 digit number'\n      hintText='Enter your guess' */\n\n    return (\n      <div stlye={{padding: 20, flexDirection: 'column'}}>\n        <p>The target is to guess a 5 digit number. A \"*\" means the number is at the right spot,\n          \"+\" means the number is in the 5 digit number but is in the wrong spot,\n          and \"-\" means the number is not in the 5 digit number.</p>\n        <div style={{flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}} >\n        <TextField\n          onChange={this.handleOnChange}         \n          disabled={this.state.disableT}\n          style={textFieldStyle}\n          variant=\"outlined\"\n        />\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          disabled={this.state.disableB}\n          onClick={this.handleClick}>\n          {this.state.button}\n        </Button>\n        </div>\n        {this.state.enteredGuesses.map(item => item)}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}